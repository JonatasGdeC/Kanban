@using Kanban.WEB.Request
@inject BoardApi BoardApi
@inject ColumnsApi ColumnsApi

<MudDialog Class="p-3" Style="width: 480px">
  <TitleContent>
    <MudText Class="fw-bold fs-4">
      Add New Board
    </MudText>
  </TitleContent>
  <DialogContent>
    <MudForm>
      <div class="mb-3">
        <MudText Color="Color.Default">Name</MudText>
        <MudTextField T="string" Required="true" Placeholder="e.g. Web Design" Variant="Variant.Outlined" RequiredError="Name is required!" Error="@_errorTitleBoard" ErrorText="Name is required!" @bind-Value="@_title" Style="font-weight: bold; color: #000"/>
      </div>
      @if (Columns.Any())
      {
        <div>
          <MudText Color="Color.Default">Columns</MudText>
          @foreach (var column in Columns)
          {
            <div class="d-flex align-items-center mb-2">
              <MudTextField T="string" Required="true" Placeholder="Column Name" Variant="Variant.Outlined" @bind-Value="@column.Name" Class="flex-grow-1 me-2" RequiredError="Column name is required!" Error="_errorTitleColumn" ErrorText="Column name is required!" Style="font-weight: bold; color: #000"/>
              <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Default" OnClick="() => RemoveColumn(column)"/>
            </div>
          }
        </div>
      }
      <MudButton Class="button btnAdd" OnClick="AddColumn">+ Add New Column</MudButton>
      <MudButton Class="button btnMain" OnClick="AddBoard">Create New Board</MudButton>
    </MudForm>
  </DialogContent>
</MudDialog>

@code {
  [CascadingParameter] private MudDialogInstance MudDialog { get; set; }

  private List<ColumnModel> Columns { get; set; } = new();
  private void AddColumn() => Columns.Add(new ColumnModel());
  private void RemoveColumn(ColumnModel column) => Columns.Remove(column);

  private class ColumnModel
  {
    public string Name { get; set; }
  }

  private string? _title = "";

  private bool _errorTitleBoard = false;
  private bool _errorTitleColumn = false;

  private async Task AddBoard()
  {
    if (!string.IsNullOrWhiteSpace(_title))
    {
      var request = new BoardsRequest(_title, DateTime.Today);
      var boardId = await BoardApi.AddBoardAsync(request);

      foreach (var column in Columns)
      {
        if (!string.IsNullOrWhiteSpace(column.Name))
        {
          var columnRequest = new ColumnsRequest(boardId, column.Name, 1);
          await ColumnsApi.AddColumnAsync(columnRequest);
        }
        else
        {
          Snackbar.Add("Add a name for the column!", Severity.Error, options => { Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomEnd; });
        }
      }

      MudDialog.Close(DialogResult.Ok(true));
      NavigationManager.NavigateTo("/");
      Snackbar.Add("Board created successfully!", Severity.Success, options => { Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomEnd; });
      StateHasChanged();
    }
    else
    {
      _errorTitleBoard = true;
      Snackbar.Add("Add a name for the board!", Severity.Error, options => { Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomEnd; });
    }
  }
}
