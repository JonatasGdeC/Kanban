@inject ColumnsApi ColumnsApi

@if (Board != null)
{
  <MudAppBar Elevation="1" Dense="false" Color="Color.Transparent">
    <MudText Typo="Typo.h1" Class="fs-3 fw-bold">@Board.Name</MudText>
    <MudSpacer/>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="border-radius: 25px" Disabled="@_disabled">
      + Add New Task
    </MudButton>
    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Style="align-self: auto;">
      <MudMenuItem>Edit Board</MudMenuItem>
      <MudMenuItem OnClick="DeleteBoard">Delete Board</MudMenuItem>
    </MudMenu>
  </MudAppBar>
}

@code{
  [Parameter] public BoardsResponse? Board { get; set; }
  private ICollection<ColumnsResponse>? _columns;
  private bool _disabled = true;

  protected override async Task OnParametersSetAsync()
  {
    try
    {
      _columns = await ColumnsApi.GetColumnByBoardIdAsync(Board.Id);
      if (_columns != null && _columns.Any())
      {
        _disabled = false;
      }
      else
      {
        _disabled = true;
      }
    }
    catch (Exception ex)
    {
      Console.WriteLine($"Error: {ex.Message}");
    }
  }

  private Task DeleteBoard()
  {
    var options = new DialogOptions { CloseOnEscapeKey = true };
    var parameters = new DialogParameters { { "BoardId", Board.Id } };
    return DialogService.ShowAsync<BoardDeleteDialog>("Delete Board", parameters, options);
  }
}
