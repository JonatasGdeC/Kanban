@inject BoardAPI BoardAPI

@if (boards != null)
{
  <MudText Class="textInfo">All Boards (@boards.Count())</MudText>
  foreach (var board in boards)
  {
    <MudButton Class="@(selectedBoardId == board.Id ? "btnSelect active" : "btnSelect")" OnClick="@(() => BoardSelect(board))">
      <MudIcon Icon="@Icons.Material.Filled.Dashboard"/>
      <MudText Class="ml-3">@board.Name</MudText>
    </MudButton>
  }
}

@code{
  private ICollection<BoardsResponse> boards;
  private int? selectedBoardId;

  [Parameter] public EventCallback<BoardsResponse?> OnBoardSelected { get; set; }

  protected override async Task OnParametersSetAsync()
  {
    boards = await BoardAPI.GetBoardsAsync();
    StateHasChanged();
  }

  private async void BoardSelect(BoardsResponse boardsResponse)
  {
    selectedBoardId = boardsResponse.Id;
    await OnBoardSelected.InvokeAsync(boardsResponse);
    navigationManager.NavigateTo($"/{boardsResponse.Id}");
    StateHasChanged();
  }
}

<style>
  .textInfo{
    margin: 15px 56px 20px 20px;
    font-weight: bold;
    font-size: 12px;
    text-transform: uppercase;
    opacity: 0.7;
  }

  .btnSelect{
    display: flex;
    justify-content: left;
    align-items: center;
    padding: 15px 32px;
    border-radius: 0 100px 100px 0;
    background-color: transparent;
    color: #000;
  }

  .btnSelect.active{
    background-color: #635FC7;
    color: #FFF;
  }
</style>
