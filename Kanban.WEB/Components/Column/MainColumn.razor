@inject ColumnsApi ColumnsApi

<div style="background-color: #E4EBFA; height: 100vh;">
  @if (_columns != null && _columns.Any())
  {
  <MudDropContainer T="DropItem" Items="_items" ItemsSelector="@((item, dropzone) => item.Identifier == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
    <ChildContent>
      @foreach (var column in _columns)
      {
        <MudDropZone T="DropItem" Identifier="@column.Name" Class="rounded mud-background-gray pa-6 ma-8 " Style="width: 280px">
          <MudText Typo="Typo.h6" Class="mb-4">@column.Name</MudText>
        </MudDropZone>
      }
    </ChildContent>
    <ItemRenderer>
      <MudPaper Elevation="25" Class="pa-4 my-4">@context.Name</MudPaper>
    </ItemRenderer>
  </MudDropContainer>
  }
  else
  {
    <div class="d-flex flex-column justify-content-center align-items-center" style="height: 100vh">
      <MudText>This board is empty. Create a new column to get started.</MudText>
      <MudButton Class="btnAddColumn" OnClick="() => OpenDialogAsync(Board.Id)">
        <MudText Class="fw-bold">+ Add New Column</MudText>
      </MudButton>
    </div>
  }
</div>

@code {
  [Parameter] public BoardsResponse? Board { get; set; }
  private ICollection<ColumnsResponse>? _columns;

  protected override async Task OnParametersSetAsync()
  {
    try
    {
      _columns = await ColumnsApi.GetColumnByBoardIdAsync(Board!.Id) ?? null;
      StateHasChanged();
    }
    catch (Exception ex)
    {
      Console.WriteLine($"Error: {ex.Message}");
    }
  }

  private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
  {
    dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
  }

  private List<DropItem> _items = new()
  {
    new DropItem() { Name = "Drag me!", Identifier = "Coluna1" },
    new DropItem() { Name = "Or me!", Identifier = "Coluna2" },
    new DropItem() { Name = "Just Mud", Identifier = "Coluna3" },
  };

  public class DropItem
  {
    public string Name { get; init; }
    public string Identifier { get; set; }
  }

  private Task OpenDialogAsync(int boardId)
  {
    var parameters = new DialogParameters { ["BoardId"] = boardId };
    var options = new DialogOptions { CloseOnEscapeKey = true };
    return DialogService.ShowAsync<ColumnAddDialog>("Simple Dialog", parameters, options);
  }
}

<style>
  .btnAddColumn{
    background-color: #635FC7;
    color: #FFFFFF;
    border-radius: 24px;
    margin-top: 32px;
    padding: 15px 18px;
    transition: all ease 0.3s;

    &:hover{
      background-color: #635FC7;
      opacity: 0.7;
    }
  }
</style>
